@page "/AssignmentView/{assignmentId:int}"
@using CodingPortal2.Shared
@model CodingPortal2.Pages.AssignmentViewModel

@{
Layout = UserHelper.GetLayoutBasedOnPermissionLevel(Model.PermissionLevel);
ViewData["Title"] = "Task Details";
}

@if (ViewData["SuccessMessage"] != null)
{
<div class="alert alert-success alert-dismissible fade show" role="alert">
    @ViewData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}

@if (ViewData["ErrorMessage"] != null)
{
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    @ViewData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}

<!DOCTYPE html>

<div>
    <h2 class="text-center">@Model.Assignment!.Title</h2>
    <div class="d-flex justify-content-between">
        <div style="margin-left: 1%;">
            <div id="TimeLeftToDoAssignmentClock" style="text-align: center; margin-top: 20px;"></div>
        </div>
        <div style="margin-right: 1%; text-align: right;">
            <div id="TimeLeftToAnotherUploadClock" style="text-align: center; margin-top: 20px;"></div>
        </div>
    </div>
    <div class="d-flex justify-content-between">
        <div style="margin-left: 1%;">
            @Html.Raw(Model.Assignment.Content)
        </div>
        <div style="margin-right: 1%; text-align: right;">
            <span>Total points to get: @Model.Assignment.TotalPoints</span>
        </div>
    </div>
    <div id="overlay-container">
        <form method="post" asp-page-handler="SubmitCode" asp-route-assignmentId="@Model.Assignment.AssignmentId">
            <div align="center">
                <textarea id="UserCode" name="UserCode" class="form-control" style="resize: vertical; width: 98%;" rows="20" placeholder="Enter your code here"></textarea>
            </div>
            <div style="margin-right: 1%; margin-bottom: 1%; margin-top: 1%" align="right">
                <button id="SubmitCode" type="submit" name="action" value="SubmitCode" class="btn btn-primary" onclick="CoverSubmitCodeButton()">Submit</button>
                <button id="overlay-button" type="button" style="display: block; pointer-events: none" disabled></button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {

        let timeLeftToDoAssignment = new Date();
        timeLeftToDoAssignment.setDate(timeLeftToDoAssignment.getDate() + @Model.RemainingTimeToDoAssignment.Days);
        timeLeftToDoAssignment.setHours(timeLeftToDoAssignment.getHours() + @Model.RemainingTimeToDoAssignment.Hours);
        timeLeftToDoAssignment.setMinutes(timeLeftToDoAssignment.getMinutes() + @Model.RemainingTimeToDoAssignment.Minutes);
        timeLeftToDoAssignment.setSeconds(timeLeftToDoAssignment.getSeconds() + @Model.RemainingTimeToDoAssignment.Seconds);


        let timeLeftToNextUpload = new Date();
        timeLeftToNextUpload.setHours(timeLeftToNextUpload.getHours() + @Model.TimeToNextUpload.Hours);
        timeLeftToNextUpload.setMinutes(timeLeftToNextUpload.getMinutes() + @Model.TimeToNextUpload.Minutes);
        timeLeftToNextUpload.setSeconds(timeLeftToNextUpload.getSeconds() + @Model.TimeToNextUpload.Seconds);

        let timeLeftToDoAssignmentClock = document.getElementById('TimeLeftToDoAssignmentClock');
        let timeLeftToNextUploadClock = document.getElementById('TimeLeftToAnotherUploadClock');
        let SubmitCode = document.getElementById('SubmitCode');

        let assignmentIntervalId = setInterval(updateTimeToDoAssignment, 1000);
        let uploadIntervalId = setInterval(updateTimeToNextUpload, 1000);

        function updateTimeToDoAssignment() {
            let now = new Date();
            let timeDifferenceToDoAssignment = timeLeftToDoAssignment - now;

            if (timeDifferenceToDoAssignment > 0) {
                updateClock(timeLeftToDoAssignmentClock, timeDifferenceToDoAssignment);
            } else {
                clearInterval(assignmentIntervalId);
                timeLeftToDoAssignmentClock.innerHTML = 'Time Expired';
                SubmitCode.disabled = true;
            }
        }

        async function updateTimeToNextUpload() {
            let now = new Date();
            let timeDifferenceToNextUpload = timeLeftToNextUpload - now;

            if (timeDifferenceToNextUpload > 0) {
                updateClock(timeLeftToNextUploadClock, timeDifferenceToNextUpload);
            } else {
                clearInterval(uploadIntervalId);
                timeLeftToNextUploadClock.innerHTML = 'Upload Now';
                SubmitCode.disabled = false;
            }
        }

        function updateClock(clockElement, timeDifference) {
            let years = Math.floor(timeDifference / (1000 * 60 * 60 * 24 * 365));
            let days = Math.floor((timeDifference % (1000 * 60 * 60 * 24 * 365)) / (1000 * 60 * 60 * 24));
            let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
            let seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

            let timeRemaining = '';

            if (years > 0) {
                timeRemaining += years + 'y ';
            }

            if (days > 0 || years > 0) {
                timeRemaining += days + 'd ';
            }

            timeRemaining += hours + 'h ' + minutes + 'm ' + seconds + 's';

            clockElement.innerHTML = 'Time remaining: ' + timeRemaining;
        }
    });
</script>

<script src="https://cdn.ckeditor.com/4.22.0/standard/ckeditor.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        CKEDITOR.replace('UserCode', {
            height: 380,
        });
    });
</script>

<script>

    function CoverSubmitCodeButton() {
        var overlayButton = document.querySelector('#overlay-button');

        setTimeout(function () {
            overlayButton.style.pointerEvents = 'auto';
        }, 0);

        setTimeout(function () {
            overlayButton.style.display = 'none';
        }, 20000);
    }
</script>

<style>
    #overlay-container {
        position: relative;
    }

    #overlay-button {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: not-allowed;
        z-index: 2;
    }

    #SubmitCode {
        position: relative;
        z-index: 1;
    }
</style>
