@page "/AssignmentView/{assignmentId:int}"
@using CodingPortal2.Shared
@model CodingPortal2.Pages.AssignmentViewModel

@{
Layout = UserHelper.GetLayoutBasedOnPermissionLevel(Model.PermissionLevel);
ViewData["Title"] = "Task Details";
}

@if (ViewData["SuccessMessage"] != null)
{
<div class="alert alert-success alert-dismissible fade show" role="alert">
    @ViewData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}

@if (ViewData["ErrorMessage"] != null)
{
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    @ViewData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
}

<!DOCTYPE html>
<link rel="stylesheet" type="text/css" href="https://unpkg.com/pell/dist/pell.min.css">
<html lang="en">

<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-lite.min.js"></script>

<div>
    <h2 class="text-center">@Model.Assignment!.Title</h2>
    <div class="d-flex justify-content-between">
        <div style="margin-left: 1%;">
            <div id="TimeLeftToDoAssignmentClock" style="text-align: center; margin-top: 20px;"></div>
        </div>
        <div style="margin-right: 1%; text-align: right;">
            <div id="TimeLeftToAnotherUploadClock" style="text-align: center; margin-top: 20px;"></div>
        </div>
    </div>
    <div class="d-flex justify-content-between">
        <div style="margin-left: 1%;">
            <div id="assignment-content">@Html.Raw(Model.Assignment.Content)</div>
        </div>
        <div style="margin-right: 1%; text-align: right;">
            <span>Total points to get: @Model.Assignment.TotalPoints</span>
        </div>
    </div>
    <div id="overlay-container">
        <form method="post" asp-page-handler="SubmitCode" asp-route-assignmentId="@Model.Assignment.AssignmentId">
            <div align="center">
                <div id="editor"></div>
            </div>
            <input type="hidden" id="codeWithoutHtmlFormat" name="codeWithoutHtmlFormat" />
            <input type="hidden" id="code" name="code" />
            <div style="margin-right: 1%; margin-bottom: 1%; margin-top: 1%" align="right">
                <button id="SubmitCode" type="submit" name="action" value="SubmitCode" class="btn btn-primary">Submit</button>
                <button id="overlay-button" type="button" style="display: block; pointer-events: none" disabled></button>
            </div>
        </form>
    </div>
</div>
</html>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let timeLeftToDoAssignment = new Date();
        timeLeftToDoAssignment.setDate(timeLeftToDoAssignment.getDate() + @Model.RemainingTimeToDoAssignment.Days);
        timeLeftToDoAssignment.setHours(timeLeftToDoAssignment.getHours() + @Model.RemainingTimeToDoAssignment.Hours);
        timeLeftToDoAssignment.setMinutes(timeLeftToDoAssignment.getMinutes() + @Model.RemainingTimeToDoAssignment.Minutes);
        timeLeftToDoAssignment.setSeconds(timeLeftToDoAssignment.getSeconds() + @Model.RemainingTimeToDoAssignment.Seconds);

        let timeLeftToNextUpload = new Date();
        timeLeftToNextUpload.setHours(timeLeftToNextUpload.getHours() + @Model.TimeToNextUpload.Hours);
        timeLeftToNextUpload.setMinutes(timeLeftToNextUpload.getMinutes() + @Model.TimeToNextUpload.Minutes);
        timeLeftToNextUpload.setSeconds(timeLeftToNextUpload.getSeconds() + @Model.TimeToNextUpload.Seconds);

        let timeLeftToDoAssignmentClock = document.getElementById('TimeLeftToDoAssignmentClock');
        let timeLeftToNextUploadClock = document.getElementById('TimeLeftToAnotherUploadClock');
        let SubmitCode = document.getElementById('SubmitCode');

        let assignmentIntervalId = setInterval(updateTimeToDoAssignment, 1000);
        let uploadIntervalId = setInterval(updateTimeToNextUpload, 1000);

        function updateTimeToDoAssignment() {
            let now = new Date();
            let timeDifferenceToDoAssignment = timeLeftToDoAssignment - now;

            if (timeDifferenceToDoAssignment > 0) {
                updateClock(timeLeftToDoAssignmentClock, timeDifferenceToDoAssignment);
            } else {
                clearInterval(assignmentIntervalId);
                timeLeftToDoAssignmentClock.innerHTML = 'Time Expired';
                SubmitCode.disabled = true;
            }
        }

        async function updateTimeToNextUpload() {
            let now = new Date();
            let timeDifferenceToNextUpload = timeLeftToNextUpload - now;

            if (timeDifferenceToNextUpload > 0) {
                updateClock(timeLeftToNextUploadClock, timeDifferenceToNextUpload);
            } else {
                clearInterval(uploadIntervalId);
                timeLeftToNextUploadClock.innerHTML = 'Upload Now';
                SubmitCode.disabled = false;
            }
        }

        function updateClock(clockElement, timeDifference) {
            let days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
            let hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            let minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
            let seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

            let timeRemaining = '';

            if (days > 0) {
                timeRemaining += days + 'd ';
            }

            timeRemaining += hours + 'h ' + minutes + 'm ' + seconds + 's';

            clockElement.innerHTML = 'Time remaining: ' + timeRemaining;
        }
    });

    function CoverSubmitCodeButton() {
        var overlayButton = document.querySelector('#overlay-button');

        setTimeout(function () {
            overlayButton.style.pointerEvents = 'auto';
        }, 0);

        setTimeout(function () {
            overlayButton.style.display = 'none';
        }, 20000);
    }
</script>

<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://unpkg.com/pell"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const pell = window.pell;
        const editor = pell.init({
            element: document.getElementById('editor'),
            onChange: (html) => {
                // Handle changes if needed
                document.getElementById('markup').innerText = "HTML Output: \n\n" + html;
            }
        });

        // Handle form submission
        document.querySelector('form').onsubmit = function (event) {
            event.preventDefault();

            // Get HTML content from Pell editor
            var htmlContent = editor.content.innerHTML;

            // Set HTML content to hidden input (code)
            document.getElementById('code').value = htmlContent;

            // Remove HTML formatting for plain text content (if needed)
            var plainTextWithoutFormatting = htmlContent.replace(/<[^>]+>/g, '');

            // Set plain text content to hidden input (codeWithoutHtmlFormat)
            document.getElementById('codeWithoutHtmlFormat').value = plainTextWithoutFormatting;

            // Submit the form programmatically
            event.target.submit();
        };
    });
</script>


<style>
    #overlay-container {
        position: relative;
    }

    #overlay-button {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: not-allowed;
        z-index: 2;
    }

    #SubmitCode {
        position: relative;
        z-index: 1;
    }

    #editor {
        text-align: left;
        height: auto;
        overflow: auto;
    }

    .pell-content {
        height: auto;
        min-height: 400px;
    }
</style>
